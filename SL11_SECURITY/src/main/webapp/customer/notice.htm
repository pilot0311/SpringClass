/customer/notice.htm

security(보안) = authentication(인증) + authorization(권한)
						악명 로그인						관리자,일반회원
2. 인증, 권한 처리 = 쿠키, 세션
	스프링 Interceptor vs 필터 차이점
	
	스프링컨테이너
	[스프링빈 객체... 스프링인터셉터]
	
3. 체크 제약조건 확인 후 삭제
4. 글쓰기 작업 확인
5. 스프링 시큐리티
	1) pom.xml springframework.security 의존 모듈확인
		공식문서에는 spring-security-web 1개 설정
	<dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-web</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-config</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-core</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-taglibs -->
      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-taglibs</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>
      
      2) 시큐리티 관련 설정 security-context.xml
      <context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
				/WEB-INF/spring/root-context.xml
				/WEB-INF/spring/security-context.xml
		</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	security-context.xml
	spring-security 5.0 오류발생 -> 4.2로 사용
	
	<security:http pattern="/static/**" security="none"></security:http>   
   <security:http pattern="/design/**" security="none"></security:http>   
   
   <security:http> 
      <security:form-login/>  
   </security:http>   
   
   <security:authentication-manager> 
   </security:authentication-manager>
	
	3) web.xml
	<filter>
      <filter-name>springSecurityFilterChain</filter-name>
      <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
   </filter>
   <filter-mapping>
      <filter-name>springSecurityFilterChain</filter-name>
      <url-pattern>/*</url-pattern>
   </filter-mapping>

6. 시큐리티가 필요한 url 설계
	ㄱ. 게시판 글쓰기 - 인증(로그인)
	ㄴ. 게시판 작성자는 인증받은 ID로 사용
	ㄷ. 게시판 수정/삭제 - 작성자 확인, 관리자만 삭제
	ㄹ. 그 외의 요청 url은 인증받지 않아도 모든 사용자가 사용가능
	
7. (암기) 시큐리티 내부 구조(개요)
	(1) AuthenticationManager (인터페이스)(인증관리자) - 가장 중요한 역할, 다양한 방식의 인증 처리할 수 있도록 구조 설계됨
	(2) ProviderManager (인터페이스)(제공관리자) - 인증처리를 AuthenticationProvider 객체를 이용해서 위임하는 역할
	(3) AuthenticationProvider (인터페이스)(인증제공자) - 실제 인증 작업을 진행(처리)하는 역할
	(4) UserDetailsService (인터페이스)(사용자상세서비스) - 인증된 실제 사용자의 정보와 권한 정보를 처리해서 반환하는 객체
	
	(3) 또는 (4) 직접 구현할 경우가 있다 - 대부분 (4)를 직접 구현
	새로운 프로토콜이나 인증 구현 방식을 직접 구현하는 경우에는 (3) 구현
	
8. [6]시큐리티가 필요한 url 설계 -> 접근 제한 설정 코딩
	1) 접근 제한 설정 태그 - security-context.xml
	<security:http use-expressions="true"> 
	  <security:intercept-url pattern="url패턴" access="권한(권한명,표현식)"/>
      <security:form-login/>  
   </security:http>
   
   use-expressions="true" 표현식사용 true
   
   2) 표현식
   	hasRole(), hasAuthority() - 해당 권한이 있으면 true
   	hasAnyRole(), hasAnyAuthority() - 여러 권한 중에 하나라도 해당 권한이 있으면 true
   	principal - 현재 사용자 정보를 의미
   	permitAll - 모든 사용자에게 허용
   	denyAll - 모든 사용자 거부
   	isAnomymous() - 익명의 사용자의 경우 (로그인 하지 않은 경우도 해당)
   	isAuthenticated() - 인증된 사용자면 true
   	isFullyAuthenticated() - (자동로그인)Remember-me 로 인증된 것이 아닌 인증된 사용의 경우 true
   	
   	<security:intercept-url pattern="/customer/noticeReg.htm" access="isAuthenticated()" />
	<security:intercept-url pattern="/customer/noticeDel.htm" access="hasRole('ROLE_ADMIN')" />
	<security:intercept-url pattern="/**" access="permitALL" />
	
	3) 실제 회원 테이블 연동해서 로그인 처리 X
		인 메모리 인증 방식으로 로그인 처리 (계정 + 역할(권한) 설정)
		스프링 5부터 시큐리티와 관련된 인증 처리 할 때 PasswordEncoder 객체를 등록 해서 인증 처리 해야 한다
		
10. hong/4321 로그인 오류 하고 나서
	게시글 삭제 버튼을 클릭하면 Http 상태 403 금지됨 에러 발생
	
	=> 접근 금지 에러 발생했을 때 
		1) 특정 페이지로 이동
		2) AccessDeniedHandler 직접 구현해서 접근 제한 처리..(권장)
			이유: 접근 제한이 된 경우 다양한 처리를 하고 싶다면..
			
			<security:access-denied-handler error-page="/common/accessError.htm"/>
			CommonController.java
			
			org.doit.ik.security 패키지
				ㄴ CustomAccessDeniedHandler
				
11. 스프링이 제공하는 로그인 페이지
	커스텀 로그인 페이지 사용
	
	<security:form-login login-page="/joinus/login.htm"/>  : 반드시 GET방식이여야 한다
	<input type="hidden" name="${_csrf.parameterName }" value="${_csrf.token }">
	
12. 로그인 후에 특정한 동작을 하도록 제어하고 싶은 경우
	(예: 로그인 성공 후 특정 페이지로 이동, 별도의 쿠키 등으 생성해서 처리)
	AuthenticationSuccessHandler 인터페이스 구현 등록
	
13. 로그인 실패했을 때
	http://localhost/joinus/login.htm?error=true
	
14. header.jsp 수정

15. 로그 아웃 처리
	<security:logout logout-success-url="/" invalidate-session="true"
									logout-url="/joinus/logout.htm"/>