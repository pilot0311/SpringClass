/customer/notice.htm


AM(인증 관리자)
		↑
PM(제공 관리자)  ↔ 	AP(인증제공자)	↔ UDS()
							인증처리객체			인증정보객체
													직접구현
[2] 직접 USEDETAILSSERVICE	구현하는방법

3.	어떤 인증 받은 추가적인 정보를 저장
	MemberVO + 추가적인 정보 필드
	AuthVO.java 권한정보
	
4. 인증받은 정보를 저장 - DB 관련 코딩 추가, 수정
	MemberMapper.java
	MemberMapper.xml
	
	<resultMap type="org.doit.ik.domain.MemberVO" id="memberMap">
		<id property="id" column="id"/>
		<result property="id" column="id"/>
		<result property="pwd" column="pwd"/>
		<result property="name" column="name"/>
		<result property="regdate" column="regdate"/>
		<collection property="authList" resultMap="authMap">
			<result property="username" column="username"/>
			<result property="authority" column="authority"/>
		</collection>
	</resultMap>
	<resultMap type="org.doit.ik.domain.AuthVO" id="authMap"></resultMap>
	<select id="read" resultMap="memberMap">
		SELECT id, pwd, name, enabled, regdate, authority
		FROM member m LEFT JOIN member_authorities auth ON m.id = auth.username
		WHERE m.id = #{userid}
	</select>
	
	
5. CustomUserDetailsService 직접 구현
	오버라이딩
	UserDetails  loadUserByUsername(String username)
		username = member 테이블의 id
		로그인한 회원정보를 select 작업
		MemberVO 객체 생성 -> UserDetails 타입으로 변환
	UserDetails 클래스 타입으로 반환
	
	org.doit.ik.security.domain.CustomerUser
	
	/////////////////////////////////////////////////
	
	웹 소켓
	html5 - API : 웹 소켓
	
	자바의 웹 소켓 표준에 맞춰
	웹소켓 서버 기능을 구현할 경우
	FC, 스프링 빈 객체 사용 X -> 클래스 ㅔㅈ공
	컨트롤러를 구현한 것과 비슷한 방식으로 서버를 구현할 수 있다
	- WebSocketHandler 클래스
	- Sockjs 연동 : 웹 소켓을 사용할 수 없는 경우
	
	