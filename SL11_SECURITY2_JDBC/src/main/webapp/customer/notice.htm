/customer/notice.htm


1. tbl_board 게시판 테이블 member 회원 테이블 2. 스프링 시큐리티 인증
권한 처리 [인 메모리 인증방식]
<security:user-service>
	<security:user name="hong" authorities="ROLE_USER"
		password="{noop}4321" />
	<security:user name="admin"
		authorities="ROLE_USER,ROLE_ADMIN,ROLE_MANAGER" password="{noop}4321" />
</security:user-service>

	[JDBC 연동해서 인증 방식]
	
3. 스프링 시큐리티의 회원 테이블
	CREATE TABLE users
	(
		username varchar2(50) not null primary key  -- 사용자 ID
		, password varchar2(50) not null
		, enabled char(1) default '1'  -- '0'
	)
	
	CREATE TABLE authorities
	(
		username varchar(50) not null
		, authority varchar(50) not null
		, constraint fk_?? foreign key(username) references users(username)
	)
	
4. security-context.xml
	<security:jdbc-user-service data-source-ref="dataSource"/>
	
5. 기존의 member 테이블 사용 + authorities 테이블 생성
	id -> username
	pwd -> password
	enabled 컬럼추가
	
6. PasswordEncoder 임시 사용 X {noop}
 admin   $2a$10$g3e6L/DbcX7vR8cf4YvR9eGLJSYi/0cWHSor0.eJ9jC3lvxoxlwu2
 	1) 스프링 제공하는 passwordEncoder 빈 등록
 	
 	<security:authentication-provider>
			<security:jdbc-user-service 
				data-source-ref="dataSource" 
				users-by-username-query="SELECT id AS USERNAME, pwd AS PASSWORD, enabled FROM member WHERE id = ?"
				authorities-by-username-query="SELECT username AS userid, authority AS auth FROM member_authorities WHERE username = ?  "
			/>
			<security:password-encoder ref="bCryptPasswordEncoder" />
		</security:authentication-provider>
		
	2) joinController 수정
		join.jsp -> <input type="hidden" name="${_csrf.parameterName }" value="${_csrf.token }"> 확인
		 
		 joinController 수정
		@Autowired
	private PasswordEncoder passwordEncoder;
	
	@PostMapping("join.htm")
	public String join(MemberVO member)throws Exception{
		String pwd = member.getPwd();
		member.setPwd(this.passwordEncoder.encode(pwd));
		
		this.memberDao.insert(member);
		return "redirect:../index.htm";
	}
	
	3) hong,pilot,admin 계정 추가
		